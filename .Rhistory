#if greater than or equal to alpha.prob, prev theta value assigned, theta params from before also replace current theta values
current.theta.prob <- theta.prob.prev
current.theta <- theta.vals[i-1, ]
}
#theta vals are the values for alpha and beta that were used
theta.vals[i,] <- current.theta
theta.prob.vals[i] <- current.theta.prob
setTxtProgressBar(pb, i)
}
close(pb)
n
n
mcmc.function.gev <- function(niter, params, parnames, data, temps, initial.steps){
#theta.vals <- cbind(rep(NA, niter), rep(NA, niter), rep(NA, niter))
n.parnames <- length(parnames)
#creating matrix that is niter by a certain number of parameters large
theta.vals <- matrix(nrow=niter, ncol=n.parnames)
#theta.vals <- mat.or.vec( niter, 3)
#making array to store the probabilities of theta params
theta.prob.vals <- rep(0, niter)
#start with theta.1
for (i in 1:n.parnames){
theta.vals[1,i] <- params[i]
}
#theta.1 <- c(initial.mu, initial.sigma, initial.xi)
theta.1 <- theta.vals[,1]
#calculate probability of this given theta set I chose
theta.1.prob <- log.post.final2(p=theta.1,
parnames = parnames,
data = tide.data$max,
temps = temps$values,
min=priors$min,
max=priors$max) #use y.func as parameter when using this function
#place theta values and probability values into vectors to old
theta.prob.vals[1] <- theta.1.prob
param.changes <- rep(0,niter)
sigma.sd <- ((2.4)^2 /n.parnames) *matrix.maker(n.params, initial.steps)
#for loop
pb <- txtProgressBar(min=0,max=niter,initial=0,style=3)
for (i in 2:niter){
#going to try and use mvn to calculate alpha and beta
theta.prev <- theta.vals[i-1,]
if (i > 3e3){ #cov of the alpha and beta vectors
# print("if statement")
sigma.sd2 <- ((2.4)^2 /n.parnames) * cov(theta.vals[1:(i-1),]) #changed from theta.vals[1:i-1,]
#cov <- matrix(c(step.size.alpha, 0, 0, step.size.beta), ncol=2)
#covar.vals[i] <- sigma.sd2
#mu.sigma.xi.dependent <- revd(n=1, loc = theta.prev[1], scale = theta.prev[2], shape =theta.prev[3] , type=c("GEV"))
mu.sigma.xi.dependent <- rmvnorm(n = 1, mean = theta.prev, sigma = sigma.sd2) #sigma = covariance matrix
}
else{
# covar.vals[i] <- sigma.sd
# mu <- c(theta.prev[1],theta.prev[2], theta.prev[3])
#mu.sigma.xi.dependent <- revd(n=1, loc = theta.prev[1], scale = theta.prev[2], shape =theta.prev[3] , type=c("GEV"))
mu.sigma.xi.dependent <- rmvnorm(n = 1, mean = theta.prev, sigma = sigma.sd)
#print(mu.sigma.xi.dependent)
}
current.theta <- mu.sigma.xi.dependent
theta.star.prob <- log.post.final2(p = current.theta,
parnames = parnames,
data = tide.data$max,
temps = temps$values,
min=priors$min,
max=priors$max)
#pull probability value of prev params
theta.prob.prev <- theta.prob.vals[i-1]
#calculate alpha
alpha.prob <- min(0, theta.star.prob - theta.prob.prev)
#decide which parameter to continue with
u <- runif(n=1, min=0, max=1)
#if less than alpha.prob, new theta value is assigned
if (log(u) < alpha.prob) {
current.theta.prob <- theta.star.prob
param.changes[i] <- 1
}else{
#if greater than or equal to alpha.prob, prev theta value assigned, theta params from before also replace current theta values
current.theta.prob <- theta.prob.prev
current.theta <- theta.vals[i-1, ]
}
#theta vals are the values for alpha and beta that were used
theta.vals[i,] <- current.theta
theta.prob.vals[i] <- current.theta.prob
setTxtProgressBar(pb, i)
}
close(pb)
#need to return list of a lot of values from this function
mcmc.out <- vector('list', 3) #chains, acceptances, lpost, covar
names(mcmc.out) <- c('chains', 'acceptances', 'lpost')
mcmc.out$chains <- theta.vals
mcmc.out$acceptances <- param.changes
mcmc.out$lpost <- theta.prob.vals
return(mcmc.out)
}
mu <- 400
mu0 <- 200
sigma  <- 150
xi <- .02
x.gev <- seq(from=0,to=1000,by=5)
stationary.curve <- devd(x.gev, loc = mu + mu0*temps$values, scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
stationary.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
stationary.curve <- devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(stationary.curve, type='l')
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev <- revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV"))
}
plot(epsilon.gev)
stationary.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
stationary.curve[i] <- devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(stationary.curve, type='l')
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV"))
}
plot(epsilon.gev)
epsilon.gev.devd <- rep(0, length(temps$values))
epsilon.gev.devd <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev.devd[i] <- devd(epsilon.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(epsilon.gev, epsilon.gev.devd )
x.gev <- seq(from=0,to=1000,by=5)
stationary.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
stationary.curve[i] <- devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(stationary.curve, type='l')
stationary.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
stationary.curve[i] <- devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
plot(x.gev[i],stationary.curve[i], type='l')
}
for (i in 1:length(temps$values)){
stationary.curve[i] <- devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
plot(x.gev[i], stationary.curve[i])
}
plot(stationary.curve, type='l')
stationary.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
stationary.curve[i] <- devd(x.gev[i], loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
plot(x.gev[i], stationary.curve[i])
}
plot(stationary.curve, type='l')
mu <- 400
mu0 <- 200
sigma  <- 150
xi <- .02
x.gev <- seq(from=0,to=1000,by=5)
x.gev <- seq(from=0,to=1000,by=5)
stationary.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
stationary.curve[i] <- devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
plot(x.gev, stationary.curve)
}
stationary.curve[i] <- devd(x.gev[i], loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
plot(x.gev, stationary.curve)
for (i in 1:length(temps$values)){
stationary.curve[i] <- devd(x.gev[i], loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(stationary.curve, type='l')
for (i in 1:length(temps$values)){
stationary.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(stationary.curve, type='l')
plot(x.gev, stationary.curve, type='l')
x.gev <- seq(from=0,to=1000,by=5)
stationary.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
stationary.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(stationary.curve, type='l')
stationary.curve <- rep(0, length(temps$values))
#the true value curve
for (i in 1:length(temps$values)){
stationary.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(stationary.curve)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- prod(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(stationary.curve)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(stationary.curve)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- prod(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(ssimple.curvee)
plot(simple.curvee)
plot(simple.curve)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- prod(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(simple.curve)
simple.curve <- rep(0, length(temps$values))
#the true value curve
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(simple.curve)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(tide.data$max, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
source('read_tide_data.R')
tide.data <- read.tide.data()
x.gev <- seq(from=0,to=1000,by=5)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(tide.data$max, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(simple.curve)
x.gev <- seq(from=0,to=1000,by=5)
simple.curve <- rep(0, length(temps$values))
#the true value curve
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(simple.curve)
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV"))
plot(i, epsilon.gev[i])
}
epsilon.gev.devd <- rep(0, length(temps$values))
x.gev <- seq(from=0,to=76,by=1)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(x.gev, simple.curve)
length(x.gev)
length(simple.curve)
x.gev <- seq(from=0,to=75,by=1)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(x.gev, simple.curve)
x.gev <- seq(from=0,to=75,by=1)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(x.gev, simple.curve)
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV"))
}
plot(epsilon.gev)
plot(x.gev, epsilon.gev)
plot(simple.curve, epsilon.gev)
plot(x.gev, epsilon.gev)
epsilon.gev.devd <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev.devd[i] <- devd(epsilon.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(epsilon.gev, epsilon.gev.devd )
plot(x.gev, simple.curve)
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV"))
}
plot(x.gev, epsilon.gev)
plot(epsilon.gev)
for (i in 1:length(temps$values)){
simple.curve <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
plot(simple.curve)
}
plot(x.gev, simple.curve)
for (i in 1:length(temps$values)){
simple.curve <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
plot(simple.curve)
}
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(x.gev, simple.curve)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- 1-pevd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
for (i in 1:length(temps$values)){
simple.curve[i] <- 1-pevd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(x.gev, simple.curve)
for (i in 1:length(temps$values)){
simple.curve[i] <- devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(x.gev, simple.curve)
x.gev <- seq(from=0,to=3000,by=5)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(simple.curve)
x.gev <- seq(from=0,to=3000,by=5)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(simple.curve)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- prod(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(simple.curve)
x.gev <- seq(from=0,to=3000,by=5)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(simple.curve)
hist(lsl.max, freq=FALSE)
curve <- devd(x.lsl, loc=gev.mle$results$par[1], scale=gev.mle$results$par[2], shape=gev.mle$results$par[3], threshold=0, log=FALSE, type=c("GEV"))
lines(curve, col = 'red')
dat.dir <- './data/'
filetype <- 'csv'
septype <- ','
today=Sys.Date(); today=format(today,format="%d%b%Y")
filename.projout <- paste('../output_model/BRICK_project-lsl-surge_NewLondon_',today,'.nc',sep='')
filename.lslout  <- paste('../output_model/BRICK_project-lsl_NewLondon_',today,'.csv', sep="")
setwd('~/codes/Klufas_NewLondon/')
files.tg <- list.files(path=dat.dir,pattern=filetype)
data <- read.csv(paste(dat.dir,files.tg[1],sep=''), header=TRUE, sep=septype)
if(length(files.tg) > 1) {
for (ff in 2:length(files.tg)) {
data <- rbind(data, read.table(paste(dat.dir,files.tg[ff],sep=''), header = TRUE, sep=septype))
}
}
years         <- data$Year
years.unique  <- unique(years)
n.years       <- length(years.unique)
lsl.mean      <- rep(0,length(n.years))
lsl.max       <- rep(0,length(n.years)) #max(data$lsl.norm[ind.thisyear])
data$lsl.norm <- rep(NA,length(years))
for (tt in 1:n.years) {
ind.thisyear <- which(years==years.unique[tt])
lsl.mean[tt] <- mean(data$Sea_Level[ind.thisyear])
data$lsl.norm[ind.thisyear] <- data$Sea_Level[ind.thisyear] - lsl.mean[tt]
lsl.max[tt] <- max(data$lsl.norm[ind.thisyear])
}
lsl.max <- lsl.max[2: n.years]
years.unique <- years.unique[2: n.years]
fit <- lm(lsl.mean ~ years.unique) #linear model
library(ismev)
gev.mle <- fevd(coredata(lsl.max), type='GEV') # extRemes
gev.mle2 <- gev.fit(coredata(lsl.max), show = FALSE)
print(gev.mle$results$par) #printing location, scale, shape for hist
x.lsl <- seq(from=0, to=3000, by=1)
hist(lsl.max, freq=FALSE)
curve <- devd(x.lsl, loc=gev.mle$results$par[1], scale=gev.mle$results$par[2], shape=gev.mle$results$par[3], threshold=0, log=FALSE, type=c("GEV"))
lines(curve, col = 'red')
loc.move <- seq(from=0, to=3000, by=1)
n.loc.move <- length(loc.move)
curve.loc <- rep(0, n.loc.move)
for (i in 1:n.loc.move){
curve.loc[i] <- sum(devd(lsl.max, loc=loc.move[i], scale=gev.mle$results$par[2], shape=gev.mle$results$par[3], log=FALSE, type=c("GEV")))
}
library(fExtremes)
library(extRemes)
library(lubridate)
library(zoo)
library(ismev)
gev.mle <- fevd(coredata(lsl.max), type='GEV') # extRemes
gev.mle2 <- gev.fit(coredata(lsl.max), show = FALSE)
print(gev.mle$results$par) #printing location, scale, shape for hist
x.lsl <- seq(from=0, to=3000, by=1)
hist(lsl.max, freq=FALSE)
curve <- devd(x.lsl, loc=gev.mle$results$par[1], scale=gev.mle$results$par[2], shape=gev.mle$results$par[3], threshold=0, log=FALSE, type=c("GEV"))
lines(curve, col = 'red')
loc.move <- seq(from=0, to=3000, by=1)
n.loc.move <- length(loc.move)
curve.loc <- rep(0, n.loc.move)
for (i in 1:n.loc.move){
curve.loc[i] <- sum(devd(lsl.max, loc=loc.move[i], scale=gev.mle$results$par[2], shape=gev.mle$results$par[3], log=FALSE, type=c("GEV")))
}
plot(curve.loc)
x.gev <- seq(from=0,to=3000,by=5)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(simple.curve)
x.gev <- seq(from=0,to=3000,by=1)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(simple.curve)
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV"))
}
plot(epsilon.gev)
for(i in 1:length(temps$values)){
epsilon.gev[i] <- revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV"), log=FALSE)
}
plot(epsilon.gev)
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- sum(revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV"), log=FALSE))
}
epsilon.gev <- rep(0, length(temps$values))
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- sum(revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV")))
}
plot(epsilon.gev)
plot(simple.curve)
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- sum(revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV")))
}
plot(epsilon.gev)
plot(simple.curve, epsilon.gev)
plot(epsilon.gev, simple.curve)
epsilon.gev.devd <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev.devd[i] <- devd(epsilon.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot(simple.curve, epsilon.gev.devd )
plot(epsilon.gev, epsilon.gev.devd )
plot( epsilon.gev.devd, epsilon.gev )
plot(epsilon.gev, simple.curve)
plot(epsilon.gev, simple.curve, type='l')
plot(epsilon.gev, simple.curve)
plot( simple.curve, epsilon.gev)
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(simple.curve)
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- sum(revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV")))
}
plot( simple.curve, epsilon.gev)
plot( epsilon.gev, simple.curve)
plot(x.gev, epsilon.gev)
x.gev <- seq(from=0,to=75,by=1)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(simple.curve)
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- sum(revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV")))
}
plot(x.gev, epsilon.gev)
epsilon.gev.devd <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev.devd[i] <- devd(epsilon.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV'))
}
plot( epsilon.gev.devd, epsilon.gev )
plot( epsilon.gev, epsilon.gev.devd )
plot(x.gev.star)
lines(stationary.curve)
plot(epsilon.gev, epsilon.gev.devd)
lines(x.gev, stationary.curve)
plot(x.gev.star)
lines(simple.curve)
plot(epsilon.gev, epsilon.gev.devd)
lines(x.gev, stationary.curve)
plot(epsilon.gev, epsilon.gev.devd)
lines(x.gev, simple.curve)
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(simple.curve)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(tide.data$max, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(simple.curve)
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=TRUE, type=c('GEV')))
}
plot(simple.curve)
p
p
p
simple.curve <- rep(0, length(temps$values))
for (i in 1:length(temps$values)){
simple.curve[i] <- sum(devd(x.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV')))
}
plot(simple.curve)
epsilon.gev <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev[i] <- sum(revd(length(x.gev), loc=mu + mu0*temps$values[i], scale = sigma, shape = xi, type=c("GEV")))
}
plot(x.gev, epsilon.gev)
epsilon.gev.devd <- rep(0, length(temps$values))
for(i in 1:length(temps$values)){
epsilon.gev.devd[i] <- devd(epsilon.gev, loc = mu + mu0*temps$values[i], scale = sigma, shape = xi, log=FALSE, type=c('GEV'))
}
plot( epsilon.gev, epsilon.gev.devd )
x.gev.star <-  epsilon.gev.devd
plot(x.gev.star)
lines(simple.curve)
plot(epsilon.gev, epsilon.gev.devd)
lines(x.gev, simple.curve)
