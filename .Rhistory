sf.optim4 <-1-pevd(lsl.max[j], loc = optim.like.temp3$optim$bestmem[1] + optim.like.temp3$optim$bestmem[2] * temp.values[j], scale = exp(optim.like.temp3$optim$bestmem[3] + optim.like.temp3$optim$bestmem[4]*temp.values[j]), shape = optim.like.temp3$optim$bestmem[5] + optim.like.temp3$optim$bestmem[6]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim4), pch = 2, col='red')
}
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, -100, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5 <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim5), pch = 2, col='red')
}
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 100, 1000, 10, 10)
lower.bound <- c(0, -100, 0, -1, -10)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j], scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, -100, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5 <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim5), pch = 2, col='red')
}
#------non stationary mu and xi----------this one works----------------------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 100, 1000, 10, 10)
lower.bound <- c(0, -100, 0, -1, -10)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j], scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
#------only sigma non stationary -------------------------this works!!-------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, -10, -1)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
#---------run for plot of non sationary sigma
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim7 <-1-pevd(lsl.max[j], loc = optim.like.temp6$optim$bestmem[1], scale = exp(optim.like.temp6$optim$bestmem[2] + optim.like.temp6$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp6$optim$bestmem[4],type=c('GEV'))
points(lsl.max[j], log10(sf.optim7), pch = 2, col='red')
}
#------ only xi non stationary---------------------------------this works! ------------------ --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 500 , 1, 1)
lower.bound <- c(0, 0, -1, -1)
optim.like.temp7 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
#---------run for plot of non sationary xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim8 <-1-pevd(lsl.max[j], loc = optim.like.temp7$optim$bestmem[1], scale = exp(optim.like.temp7$optim$bestmem[2]), shape = optim.like.temp7$optim$bestmem[3] + optim.like.temp7$optim$bestmem[4]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim8), pch = 2, col='red')
}
neg.log.like.calc <- function(p, parnames, data, temps){
n.parnames <- length(parnames)
if (n.parnames == 3){
mu <- p[1]
sigma <- p[2]
xi <- p[3]
}
else if(n.parnames ==4){
if (parnames[1] == 'mu0'){
mu0 <- p[1]
mu1 <- p[2]
sigma <- p[3]
xi <- p[4]
mu <- mu0 + mu1*temps
sigma <- exp(sigma)
}
else if (parnames[2] == 'sigma0'){
mu <- p[1]
sigma0 <- p[2]
sigma1 <- p[3]
xi <- p[4]
sigma <- exp(sigma0+ sigma1*temps)
}
else{
mu <- p[1]
sigma <- p[2]
xi0 <- p[3]
xi1 <- p[4]
sigma <- exp(sigma)
xi <- xi0 + xi1*temps
}
}
else if (n.parnames == 5){
if (parnames[1] == 'mu0' & parnames[3]=='sigma0'){
mu0 <- p[1]
mu1 <- p[2]
sigma0 <- p[3]
sigma1 <- p[4]
xi <- p[5]
mu <- mu0 + mu1*temps
sigma <- exp(sigma0 + sigma1*temps)
}
else if(parnames[2] == 'sigma0' & parnames[4] == 'xi0'){
mu <- p[1]
sigma0 <- p[2]
sigma1 <- p[3]
xi0 <- p[4]
xi1 <- p[5]
sigma <- exp(sigma0 + sigma1*temps)
xi <- xi0 + xi1*temps
}
else{
mu0 <- p[1]
mu1 <- p[2]
sigma <- p[3]
xi0 <- p[4]
xi1 <- p[5]
mu <- mu0 + mu1*temps
sigma <- exp(sigma)
xi <- xi0 + xi1*temps
}
}
else if (n.parnames ==6){
mu0 <- p[1]
mu1 <- p[2]
sigma0 <- p[3]
sigma1 <- p[4]
xi0 <- p[5]
xi1 <- p[6]
mu <- mu0 + mu1*temps
sigma <- exp(sigma0 + sigma1*temps)
xi <- xi0 + xi1*temps
}
nll <- -1*sum(devd(data, loc=mu, scale=sigma, shape=xi, type=c('GEV'), log=TRUE))
return(nll)
}
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, -100, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5 <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim5), pch = 2, col='red')
}
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals[i] - sf.optim[i], i = 1, length(lsl.max)))**2)
p.names <- c('mu0', 'mu1', 'sigma', 'xi')
upper.bound <- c(3000,1000, 1000, 5)
lower.bound <- c(0,0, -100, -5)
optim.like.temp <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, Non Stationary Mu')
points(lsl.sorted.vals, log10(esf.vals))
rmse.mu <- 0
for (j in 1:length(temp.values)){
sf.optim.mu <- 1-pevd(lsl.max[j], loc = (optim.like.temp$optim$bestmem[1] + optim.like.temp$optim$bestmem[2] * temp.values[j]), scale = exp(optim.like.temp$optim$bestmem[3]) , shape = optim.like.temp$optim$bestmem[4],type=c('GEV'))
points(lsl.max[j], log10(sf.optim.mu), pch = 2, col='red')
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals[i] - sf.optim[i], i = 1, length(lsl.max)))**2)
}
for (j in 1:length(temp.values)){
sf.optim.mu <- 1-pevd(lsl.max[j], loc = (optim.like.temp$optim$bestmem[1] + optim.like.temp$optim$bestmem[2] * temp.values[j]), scale = exp(optim.like.temp$optim$bestmem[3]) , shape = optim.like.temp$optim$bestmem[4],type=c('GEV'))
points(lsl.max[j], log10(sf.optim.mu), pch = 2, col='red')
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals[i] - sf.optim.mu[i], i = 1, length(lsl.max)))**2)
}
rmse.mu
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals[i] - (1-pevd(lsl.max[i], loc = (optim.like.temp$optim$bestmem[1] + optim.like.temp$optim$bestmem[2] * temp.values[i]), scale = exp(optim.like.temp$optim$bestmem[3]) , shape = optim.like.temp$optim$bestmem[4],type=c('GEV'))), i = 1, length(lsl.max)))**2)
rmse.mu
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals[i], i = 1, length(lsl.max)))**2)
rmse.mu
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals[i])**2))
rmse.mu
esf.vals
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals)**2))
rmse.mu
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals - (1-pevd(lsl.max[i], loc = (optim.like.temp$optim$bestmem[1] + optim.like.temp$optim$bestmem[2] * temp.values), scale = exp(optim.like.temp$optim$bestmem[3]) , shape = optim.like.temp$optim$bestmem[4],type=c('GEV')))**2)))
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals - (1-pevd(lsl.max, loc = (optim.like.temp$optim$bestmem[1] + optim.like.temp$optim$bestmem[2] * temp.values), scale = exp(optim.like.temp$optim$bestmem[3]) , shape = optim.like.temp$optim$bestmem[4],type=c('GEV')))**2)))
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals - (1-pevd(lsl.max, loc = (optim.like.temp$optim$bestmem[1] + optim.like.temp$optim$bestmem[2] * temp.values), scale = exp(optim.like.temp$optim$bestmem[3]) , shape = optim.like.temp$optim$bestmem[4],type=c('GEV')))^2)))
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals[i] - (1-pevd(lsl.max[i], loc = (optim.like.temp$optim$bestmem[1] + optim.like.temp$optim$bestmem[2] * temp.values[i]), scale = exp(optim.like.temp$optim$bestmem[3]) , shape = optim.like.temp$optim$bestmem[4],type=c('GEV')))^2)))
rmse.mu
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, Non Stationary Mu')
points(lsl.sorted.vals, log10(esf.vals))
#  rmse.mu <- 0
fit.vals.optim <- rep(0, length(lsl.max))
for (j in 1:length(temp.values)){
sf.optim.mu <- 1-pevd(lsl.max[j], loc = (optim.like.temp$optim$bestmem[1] + optim.like.temp$optim$bestmem[2] * temp.values[j]), scale = exp(optim.like.temp$optim$bestmem[3]) , shape = optim.like.temp$optim$bestmem[4],type=c('GEV'))
fit.vals.optim[j] <- sf.optim.mu
points(lsl.max[j], log10(sf.optim.mu), pch = 2, col='red')
# rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals[i] - sf.optim.mu[i], i = 1, length(lsl.max)))**2)
}
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim)^2)))
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim)^2))
rmse.mu
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.mu)^2))
p.names <- c('mu0', 'mu1', 'sigma', 'xi')
upper.bound <- c(3000,1000, 1000, 5)
lower.bound <- c(0,0, -100, -5)
optim.like.temp <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, Non Stationary Mu')
points(lsl.sorted.vals, log10(esf.vals))
fit.vals.optim.mu <- rep(0, length(lsl.max))
for (j in 1:length(temp.values)){
sf.optim.mu <- 1-pevd(lsl.max[j], loc = (optim.like.temp$optim$bestmem[1] + optim.like.temp$optim$bestmem[2] * temp.values[j]), scale = exp(optim.like.temp$optim$bestmem[3]) , shape = optim.like.temp$optim$bestmem[4],type=c('GEV'))
fit.vals.optim.mu[j] <- sf.optim.mu
points(lsl.max[j], log10(sf.optim.mu), pch = 2, col='red')
}
p.names <- c('mu0', 'mu1', 'sigma0', 'sigma1' , 'xi')
upper.bound <- c(3000,100, 1000, 10 , 5)
lower.bound <- c(0,-100, 0, 0, -5)
optim.like.temp2 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values,parnames = p.names)
fit.vals.optim.mu.sigma <- rep(0, length(lsl.max))
#-------run for plot of non sationary mu and sigma
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, non stationary mu and sigma')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.mu.sigma <- 1 - pevd(lsl.max[j], loc = (optim.like.temp2$optim$bestmem[1] + optim.like.temp2$optim$bestmem[2] * temp.values[j]), scale = exp(optim.like.temp2$optim$bestmem[3] + optim.like.temp2$optim$bestmem[4]*temp.values[j]), shape = optim.like.temp2$optim$bestmem[5],type=c('GEV'))
fit.vals.optim.mu.sigma[j] <- sf.optim.mu.sigma
points(lsl.max[j], log10(sf.optim.mu.sigma), pch = 2, col='green')
}
rmse.sigma<- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.mu.sigma)^2))
rmse.mu.sigma <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.mu.sigma)^2))
rmse.mu.sigma
p.names <- c('mu0', 'mu1', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000,100, 1000, 10 , 1, 1)
lower.bound <- c(0,-100, 0, 0, -1, -1)
optim.like.temp3 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.mu.sigma.xi <- rep(0, length(lsl.max))
#---------run for plot of non sationary mu and sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, mu, sigma, xi all nonstationary')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.mu.sigma.xi <-1-pevd(lsl.max[j], loc = optim.like.temp3$optim$bestmem[1] + optim.like.temp3$optim$bestmem[2] * temp.values[j], scale = exp(optim.like.temp3$optim$bestmem[3] + optim.like.temp3$optim$bestmem[4]*temp.values[j]), shape = optim.like.temp3$optim$bestmem[5] + optim.like.temp3$optim$bestmem[6]*temp.values[j],type=c('GEV'))
fit.vals.optim.mu.sigma.xi[j] <- sf.optim.mu.sigma.xi
points(lsl.max[j], log10(sf.optim.mu.sigma.xi), pch = 2, col='red')
}
rmse.mu.sigma.xi <- sqrt(1/(length(lsl.max))*(sum(esf.vals - sf.optim.mu.sigma.xi))**2)
rmse.mu.sigma.xi
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, -100, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.sigma.xi <- rep(0, length(lsl.max))
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5.sigma.xi <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
fit.vals.optim.sigma.xi[j] <- sf.optim5.sigma.xi
points(lsl.max[j], log10(sf.optim5.sigma.xi), pch = 2, col='red')
}
rmse.sigma.xi <- sqrt(1/(length(lsl.max))*(sum(esl.vals - fit.vals.optim.sigma.xi))^2)
rmse.mu.sigma.xi <- sqrt(1/(length(lsl.max))*(sum(esf.vals - sf.optim.mu.sigma.xi))^2)
rmse.sigma.xi <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.sigma.xi))^2)
rmse.mu.sigma.xi <- sqrt(1/(length(lsl.max))*(sum(esf.vals - sf.optim.mu.sigma.xi))^2)
rmse.sigma.xi
rmse.mu.sigma.xi
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 100, 1000, 10, 10)
lower.bound <- c(0, -100, 0, -1, -10)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.mu.xi <- rep(0, length(lsl.max))
#---------run for plot of non sationary mu and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, nonstationary mu and xi')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.mu.xi<-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j], scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
fit.vals.optim.mu.xi[j] <- sf.optim.mu.xi
points(lsl.max[j], log10(sf.optim.mu.xi), pch = 2, col='red')
}
rmse.mu.xi<- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.mu.xi))^2)
rmse.mu.xi
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, -10, -1)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.sigma <- rep(0, length(lsl.max))
#---------run for plot of non sationary sigma
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, sigma non stationary')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.sigma <-1-pevd(lsl.max[j], loc = optim.like.temp6$optim$bestmem[1], scale = exp(optim.like.temp6$optim$bestmem[2] + optim.like.temp6$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp6$optim$bestmem[4],type=c('GEV'))
fit.vals.optim.sigma[j] <- sf.optim.sigma
points(lsl.max[j], log10(sf.optim.sigma), pch = 2, col='red')
}
rmse.sigma<- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.sigma)^2))
rmse.sigma
p.names <- c('mu', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 500 , 1, 1)
lower.bound <- c(0, 0, -1, -1)
optim.like.temp7 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.xi <- rep(0, length(lsl.max))
#---------run for plot of non sationary xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.xi <-1-pevd(lsl.max[j], loc = optim.like.temp7$optim$bestmem[1], scale = exp(optim.like.temp7$optim$bestmem[2]), shape = optim.like.temp7$optim$bestmem[3] + optim.like.temp7$optim$bestmem[4]*temp.values[j],type=c('GEV'))
fit.vals.optim.xi[j] <- sf.optim.xi
points(lsl.max[j], log10(sf.optim.xi), pch = 2, col='red')
}
rmse.xi <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.xi))^2)
rmse.xi
aic.mu <- 2*1 - 2*log(fit.vals.optim.mu)
aic.mu
optim.like.temp$optim$bestval
aic.mu <- 2*1 - 2*log(optim.like.temp$optim$bestval)
aic.mu
aic.mu <- 2*1 - 2*log(optim.like.temp$optim$bestval)
aic.sigma <- 2*1 - 2*log(optim.like.temp6$optim$bestval)
aic.xi <- 2*1 - 2*log(optim.like.temp7$optim$bestval)
aic.mu.sigma <- 2*2 - 2*log(optim.like.temp2$optim$bestval)
aic.mu.xi<- 2*2 - 2*log(optim.like.temp5$optim$bestval)
aic.sigma.xi<- 2*2 - 2*log(optim.like.temp4$optim$bestval)
aic.mu.sigma.xi <- 2*3 - 2*log(optim.like.temp3$optim$bestval)
aic.mu
aic.sigma
aic.xi
aic.mu.sigma
bic.mu<- 1*log(length(lsl.max)) - 2*log(optim.like.temp$optim$bestval)
bic.sigma <- 1*log(length(lsl.max))- 2*log(optim.like.temp6$optim$bestval)
bic.xi <- 1*log(length(lsl.max))- 2*log(optim.like.temp7$optim$bestval)
bic.mu.sigma<- 2*log(length(lsl.max))- 2*log(optim.like.temp2$optim$bestval)
bic.mu.xi <- 2*log(length(lsl.max))- 2*log(optim.like.temp5$optim$bestval)
bic.sigma.xi <- 2*log(length(lsl.max))- 2*log(optim.like.temp4$optim$bestval)
bic.mu.sigma.xi <- 3*log(length(lsl.max))- 2*log(optim.like.temp3$optim$bestval)
bic.mu
bic.sigma
bic.xi
bic.mu.sigma
bic.mu.xi
bic.sigma.xi
bic.mu.sigma.xi
aic.mu <- 2*4 - 2*log(optim.like.temp$optim$bestval)
aic.sigma <- 2*4 - 2*log(optim.like.temp6$optim$bestval)
aic.xi <- 2*4 - 2*log(optim.like.temp7$optim$bestval)
aic.mu.sigma <- 2*5 - 2*log(optim.like.temp2$optim$bestval)
aic.mu.xi<- 2*5 - 2*log(optim.like.temp5$optim$bestval)
aic.sigma.xi<- 2*5 - 2*log(optim.like.temp4$optim$bestval)
aic.mu.sigma.xi <- 2*6 - 2*log(optim.like.temp3$optim$bestval)
bic.mu<- 4*log(length(lsl.max)) - 2*log(optim.like.temp$optim$bestval)
bic.sigma <- 4*log(length(lsl.max))- 2*log(optim.like.temp6$optim$bestval)
bic.xi <- 4*log(length(lsl.max))- 2*log(optim.like.temp7$optim$bestval)
bic.mu.sigma<- 5*log(length(lsl.max))- 2*log(optim.like.temp2$optim$bestval)
bic.mu.xi <- 5*log(length(lsl.max))- 2*log(optim.like.temp5$optim$bestval)
bic.sigma.xi <- 5*log(length(lsl.max))- 2*log(optim.like.temp4$optim$bestval)
bic.mu.sigma.xi <- 6*log(length(lsl.max))- 2*log(optim.like.temp3$optim$bestval)
#
p.names <- c('mu0', 'mu1', 'sigma', 'xi')
upper.bound <- c(3000,1000, 1000, 5)
lower.bound <- c(0,0, -100, -5)
optim.like.temp.mu <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, Non Stationary Mu')
points(lsl.sorted.vals, log10(esf.vals))
fit.vals.optim.mu <- rep(0, length(lsl.max))
for (j in 1:length(temp.values)){
sf.optim.mu <- 1-pevd(lsl.max[j], loc = (optim.like.temp.mu$optim$bestmem[1] + optim.like.temp.mu$optim$bestmem[2] * temp.values[j]), scale = exp(optim.like.temp.mu$optim$bestmem[3]) , shape = optim.like.temp.mu$optim$bestmem[4],type=c('GEV'))
fit.vals.optim.mu[j] <- sf.optim.mu
points(lsl.max[j], log10(sf.optim.mu), pch = 2, col='red')
}
#-----non sationary mu and sigma ----------- works ---------------------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu0', 'mu1', 'sigma0', 'sigma1' , 'xi')
upper.bound <- c(3000,100, 1000, 10 , 5)
lower.bound <- c(0,-100, 0, 0, -5)
optim.like.temp.mu.sigma <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values,parnames = p.names)
fit.vals.optim.mu.sigma <- rep(0, length(lsl.max))
#-------run for plot of non sationary mu and sigma
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, non stationary mu and sigma')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.mu.sigma <- 1 - pevd(lsl.max[j], loc = (optim.like.temp.mu.sigma$optim$bestmem[1] + optim.like.temp.mu.sigma$optim$bestmem[2] * temp.values[j]), scale = exp(optim.like.temp.mu.sigma$optim$bestmem[3] + optim.like.temp.mu.sigma$optim$bestmem[4]*temp.values[j]), shape = optim.like.temp.mu.sigma$optim$bestmem[5],type=c('GEV'))
fit.vals.optim.mu.sigma[j] <- sf.optim.mu.sigma
points(lsl.max[j], log10(sf.optim.mu.sigma), pch = 2, col='green')
}
#------all variables non sationary --------------------------------------this one does work ------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu0', 'mu1', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000,100, 1000, 10 , 1, 1)
lower.bound <- c(0,-100, 0, 0, -1, -1)
optim.like.temp.mu.sigma.xi <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.mu.sigma.xi <- rep(0, length(lsl.max))
#---------run for plot of non sationary mu and sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, mu, sigma, xi all nonstationary')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.mu.sigma.xi <-1-pevd(lsl.max[j], loc = optim.like.temp.mu.sigma.xi$optim$bestmem[1] + optim.like.temp.mu.sigma.xi$optim$bestmem[2] * temp.values[j], scale = exp(optim.like.temp.mu.sigma.xi$optim$bestmem[3] + optim.like.temp.mu.sigma.xi$optim$bestmem[4]*temp.values[j]), shape = optim.like.temp.mu.sigma.xi$optim$bestmem[5] + optim.like.temp3$optim$bestmem[6]*temp.values[j],type=c('GEV'))
fit.vals.optim.mu.sigma.xi[j] <- sf.optim.mu.sigma.xi
points(lsl.max[j], log10(sf.optim.mu.sigma.xi), pch = 2, col='red')
}
#------sigma and xi non stationary----------------------works now! ----------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, -100, 0, -1, -1)
optim.like.temp.sigma.xi <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.sigma.xi <- rep(0, length(lsl.max))
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, non stationary sigma and xi ')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5.sigma.xi <-1-pevd(lsl.max[j], loc = optim.like.temp.sigma.xi$optim$bestmem[1], scale = exp(optim.like.temp.sigma.xi$optim$bestmem[2] + optim.like.temp.sigma.xi$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp.sigma.xi$optim$bestmem[4] + optim.like.temp.sigma.xi$optim$bestmem[5]*temp.values[j],type=c('GEV'))
fit.vals.optim.sigma.xi[j] <- sf.optim5.sigma.xi
points(lsl.max[j], log10(sf.optim5.sigma.xi), pch = 2, col='red')
}
#------non stationary mu and xi----------this one works----------------------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 100, 1000, 10, 10)
lower.bound <- c(0, -100, 0, -1, -10)
optim.like.temp.mu.xi <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.mu.xi <- rep(0, length(lsl.max))
#---------run for plot of non sationary mu and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, nonstationary mu and xi')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.mu.xi<-1-pevd(lsl.max[j], loc = optim.like.temp.mu.xi5$optim$bestmem[1] +optim.like.temp.mu.xi$optim$bestmem[2]*temp.values[j], scale = exp(optim.like.temp.mu.xi$optim$bestmem[3]), shape = optim.like.temp.mu.xi$optim$bestmem[4] + optim.like.temp.mu.xi$optim$bestmem[5]*temp.values[j],type=c('GEV'))
fit.vals.optim.mu.xi[j] <- sf.optim.mu.xi
points(lsl.max[j], log10(sf.optim.mu.xi), pch = 2, col='red')
}
#------only sigma non stationary -------------------------this works!!-------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, -10, -1)
optim.like.temp.sigma <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.sigma <- rep(0, length(lsl.max))
#---------run for plot of non sationary sigma
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT, sigma non stationary')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.sigma <-1-pevd(lsl.max[j], loc = optim.like.temp.sigma$optim$bestmem[1], scale = exp(optim.like.temp.sigma$optim$bestmem[2] + optim.like.temp.sigma$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp.sigma$optim$bestmem[4],type=c('GEV'))
fit.vals.optim.sigma[j] <- sf.optim.sigma
points(lsl.max[j], log10(sf.optim.sigma), pch = 2, col='red')
}
#------ only xi non stationary---------------------------------this works! ------------------ --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 500 , 1, 1)
lower.bound <- c(0, 0, -1, -1)
optim.like.temp.xi <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values, parnames = p.names)
fit.vals.optim.xi <- rep(0, length(lsl.max))
#---------run for plot of non sationary xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim.xi <-1-pevd(lsl.max[j], loc = optim.like.temp.xi$optim$bestmem[1], scale = exp(optim.like.temp.xi$optim$bestmem[2]), shape = optim.like.temp.xi$optim$bestmem[3] + optim.like.temp.xi$optim$bestmem[4]*temp.values[j],type=c('GEV'))
fit.vals.optim.xi[j] <- sf.optim.xi
points(lsl.max[j], log10(sf.optim.xi), pch = 2, col='red')
}
#only mu non stationary
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.mu)^2))
#only sigma non stationary
rmse.sigma<- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.sigma)^2))
#xi non stationary
rmse.xi <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.xi))^2)
#mu and sigma non stationary
rmse.mu.sigma <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.mu.sigma)^2))
#mu and xi non stationary
rmse.mu.xi<- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.mu.xi))^2)
#sigma and xi non stationary
rmse.sigma.xi <- sqrt(1/(length(lsl.max))*(sum(esf.vals - fit.vals.optim.sigma.xi))^2)
#mu, sigma, xi non stationary
rmse.mu.sigma.xi <- sqrt(1/(length(lsl.max))*(sum(esf.vals - sf.optim.mu.sigma.xi))^2)
#----------------AIC For Optim Fits
#2k - 2 ln (L)
aic.mu <- 2*4 - 2*log(optim.like.temp.mu$optim$bestval)
aic.sigma <- 2*4 - 2*log(optim.like.temp.sigma$optim$bestval)
aic.xi <- 2*4 - 2*log(optim.like.temp.xi$optim$bestval)
aic.mu.sigma <- 2*5 - 2*log(optim.like.temp.mu.sigma$optim$bestval)
aic.mu.xi<- 2*5 - 2*log(optim.like.temp.mu.xi$optim$bestval)
aic.sigma.xi<- 2*5 - 2*log(optim.like.temp.sigma.xi$optim$bestval)
aic.mu.sigma.xi <- 2*6 - 2*log(optim.like.temp.mu.sigma.xi$optim$bestval)
#------------------BIC For Optim Fits
#kln(n) - 2 ln(L)
bic.mu<- 4*log(length(lsl.max)) - 2*log(optim.like.temp.mu$optim$bestval)
bic.sigma <- 4*log(length(lsl.max))- 2*log(optim.like.temp.sigma$optim$bestval)
bic.xi <- 4*log(length(lsl.max))- 2*log(optim.like.temp.xi$optim$bestval)
bic.mu.sigma<- 5*log(length(lsl.max))- 2*log(optim.like.temp.mu.sigma$optim$bestval)
bic.mu.xi <- 5*log(length(lsl.max))- 2*log(optim.like.temp.mu.xi$optim$bestval)
bic.sigma.xi <- 5*log(length(lsl.max))- 2*log(optim.like.temp.sigma.xi$optim$bestval)
bic.mu.sigma.xi <- 6*log(length(lsl.max))- 2*log(optim.like.temp.mu.sigma.xi$optim$bestval)
install.packages('fExtremes')
install.packages("fExtremes")
setwd('~/codes/Klufas_NewLondon/')
