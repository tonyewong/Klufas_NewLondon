regret.calc.out$expected.damage.w.barrier <- expected.damage.w.barrier
regret.calc.out$total.w.barrier <- total.expected.w.barrier
regret.calc.out$total.no.barrier <- total.expected.no.barrier
regret.calc.out$expected.total.costs.no.barrier <- expected.total.costs.no.barrier
regret.calc.out$expected.total.costs.w.barrier <- expected.total.costs.w.barrier
return(regret.calc.out)
}
param.names <- c('mu', 'sigma', 'xi')
test1 <- mcmc.test.stationary.parallel[[1]]$samples
regret.stationary <- regret.calculator(niter = niter,
years = years,
effect.height.no.barrier = effect.height.no.barrier,
effect.height.barrier=effect.height.barrier,
slr=slr,
mcmc.chain = test1 ,
n.params = 3,
param.names = param.names,
temps = temp.vals)
regret.calculator <- function(niter,
years,
effect.height.no.barrier,
effect.height.barrier,
slr,
mcmc.chain,
n.params,
param.names,
temps
){ #niter = number iterations (int), years - sequence of years to cover,
#prob of a certain flood happening                    #effect.height.no.barrier (height in mm of no damage area)
#effect.height.barrier (height in mm of no damage area w barrier present)
#slr, rate at which sea level is changing in the particular area
#change in effective height over course of years
#lower.level <- effect.height.no.barrier - 21*slr
#lower.level.barrier <- effect.height.barrier - 21*slr
# hgt.changing <- effect.height.no.barrier - length(years)*slr
#hgt.barrier.changing <- effect.height.barrier - length(years)*slr
#hgt.changing <- seq(from = 2850, to = 2796 , by = -2.57 ) #this is hard coded at the moment to try to get it to work
#hgt.barrier.changing <- seq(from = 3280, to = 3227, by = -2.57)
n.years <- length(years)
#calculate cdf of flooding w no barrier and sea level
#temp included if non stationary
#prob.of.flood <- matrix(ncol = length(years), nrow = niter)
#new.vals.barrier <- matrix(ncol = length(years), nrow = niter)
#prob.of.flood.barrier <- matrix(ncol = length(years), nrow = niter)
#new.vals.barrier <- matrix(ncol = length(years), nrow = niter)
#prob.of.flood <- rep(0,length(sea.level))
#prob.of.flood.barrier <- rep(0,length(sea.level))
total.expected.no.barrier <- rep(0, niter)
total.expected.w.barrier <- rep(0,niter)
#new.vals.no.barrier <- rep(0,length(sea.level))
#new.vals.barrer <- rep(0,length(sea.level))
#new.vals.no.barrier <- rep(0, niter)
#new.vals.barrier <- rep(0, niter)
#expected.damage.no.barrier <- rep(0,n.years)#0,n.years)
#expected.damage.w.barrier <- rep(0,n.years)
expected.total.costs.no.barrier <- rep(0,niter)
expected.total.costs.w.barrier <- rep(0,niter)
pb <- txtProgressBar(min=0,max=niter,initial=0,style=3)
for(i in 1:niter){ #cutting off the start before convergence , need temp prediction of the future , going to make it shorter to see how long this takes to do
#uncomment when doing more than one iteration
expected.damage.no.barrier <- rep (0,n.years)
expected.damage.w.barrier <- rep(0,n.years)
total.costs.no.barrier <- rep (0,n.years)
total.costs.w.barrier <- rep (0,n.years)
for (t in 1:n.years){
#new.vals.no.barrier[i] <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temps[t], data = sea.level) #hgt.changing
#new.vals.barrier[i] <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temps[t], data = sea.level) #hgt.changing
# prob.of.flood[i,t] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temperature = temps[t], data.pt=hgt.changing[t])
# new.vals.no.barrier[t] <- devd.calculator( p= mcmc.chain[(i + 5e4),], param.names = param.names, temps[t], data = hgt.changing)
#prob.of.flood.barrier[i,t] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temperature =temps[t], data.pt=hgt.barrier.changing[t])
# new.vals.barrier[t] <- devd.calculator(p= mcmc.chain[(i + 5e4),], param.names = param.names, temps[t], data = hgt.barrier.changing)
#uncomment when doing more than one iteration
#new.vals.no.barrier <- rep (0,length(sea.level))
#new.vals.barrer <- rep(0,length(sea.level))
#for (q in 1:length(sea.level.mm)){
#pevd ?
new.vals.no.barrier <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temperature =temps[t], data = sea.level.mm) #hgt.changing
new.vals.barrier <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temperature =temps[t], data = sea.level.mm) #hgt.changing
#prob.of.flood[q] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temps[t], data.pt=hgt.changing[t])
# new.vals.no.barrier[t] <- devd.calculator( p= mcmc.chain[(i + 5e4),], param.names = param.names, temps[t], data = hgt.changing)
#prob.of.flood.barrier[q] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temps[t], data.pt=hgt.barrier.changing[t])
#}
#calculating changing damage costs as sea level rises
damage.values <- rep(0, length(sea.level.m))
damage.values.w.barrier <- rep(0, length(sea.level.m))
for (j in 1:length(sea.level.m)){
damage.values[j] <- damage.calc(sea.level.m[j], t)*1e6
damage.values.w.barrier[j] <- damage.calc.w.barrier(sea.level.m[j], t)*1e6
}
expected.damage.no.barrier[t] <- sum(damage.values * new.vals.no.barrier) / sum(new.vals.no.barrier)
expected.damage.w.barrier[t] <- sum(damage.values.w.barrier * new.vals.barrier) / sum(new.vals.barrier)
total.costs.no.barrier[t] <- expected.damage.no.barrier[t]
if (t == 1){
total.costs.w.barrier[t] <- expected.damage.w.barrier[t] + 18e6
}
else{
total.costs.w.barrier[t] <- expected.damage.w.barrier[t] + (75e3 / ((1.035)^(t-1)))
}
# expected.damage + build/maintenance costs
}
#expected damage costs
print(expected.damage.no.barrier - expected.damage.w.barrier)
#print(expected.damage.w.barrier)
total.expected.no.barrier[i] <- mean(expected.damage.no.barrier)
total.expected.w.barrier[i] <- mean(expected.damage.w.barrier)
#expected costs including building & upkeeping barrier
expected.total.costs.no.barrier[i] <- mean(total.costs.no.barrier)
expected.total.costs.w.barrier[i] <- mean(total.costs.w.barrier)
setTxtProgressBar(pb, i)
}
close(pb)
#flood.damage.no.barrier <- expected.total.costs.no.barrier * prob.of.flood #changed from total.expected.no.barrier
#flood.damage.w.barrier <- expected.total.costs.w.barrier * prob.of.flood.barrier  #changed from total.expected.w.barrier
#print(flood.damage.no.barrier)
#print(flood.damage.w.barrier)
#find the average values of damage costs for each iteration
#avg.damage.no.barrier <- mean(expected.total.costs.no.barrier) #apply(flood.damage.no.barrier, 1, mean) #mean(flood.damage.no.barrier)
#avg.damage.w.barrier <- mean(expected.total.costs.w.barrier)#apply(flood.damage.w.barrier, 1, mean) #mean(flood.damage.w.barrier)
#use which to find the number of places where we should and shouldnt build
should.build <- which(expected.total.costs.w.barrier < expected.total.costs.no.barrier)
shouldnt.build <- which(expected.total.costs.no.barrier < expected.total.costs.w.barrier)
#should.build <- which(avg.damage.w.barrier < avg.damage.no.barrier)
#shouldnt.build <- which(avg.damage.no.barrier < avg.damage.w.barrier)
# regret.vals <- rep(0, length(avg.damage.no.barrier))
regret.vals <- rep(0, length(expected.total.costs.w.barrier))
if (length(should.build) > length(shouldnt.build)){
#we will be building - now need to calculate regret of the no build values
for (i in 1:length(shouldnt.build)){
regret.vals[i] <- abs(expected.total.costs.no.barrier[shouldnt.build[i]] - expected.total.costs.w.barrier[shouldnt.build[i]])
# regret.vals[i] <- abs(avg.damage.no.barrier[shouldnt.build[i]] - avg.damage.w.barrier[shouldnt.build[i]])
}
}else{
for (i in 1:length(should.build)){
regret.vals[i] <- abs(expected.total.costs.no.barrier[should.build[i]] - expected.total.costs.w.barrier[should.build[i]])
#regret.vals[i] <- abs(avg.damage.no.barrier[should.build[i]] - avg.damage.w.barrier[should.build[i]])
}
#regret.vals[i] <- abs(avg.damage.no.barrier[should.build[i]] - avg.damage.w.barrier[should.build[i]])
}
regret.calc.out <- vector('list', 11)
names(regret.calc.out) <- c('regret.array', 'should.build',
'shouldnt.build',
'new.vals.no.barrier', 'new.vals.barrier','expected.damage.no.barrier',
'expected.damage.w.barrier', 'total.w.barrier', 'total.no.barrier',
'expected.total.costs.no.barrier', 'expected.total.costs.w.barrier')
#taken out: 'no.barrier', 'w.barrier','flood.prob', 'flood.w.barrier.prob',
# regret.calc.out$no.barrier <- flood.damage.no.barrier
#regret.calc.out$w.barrier <- flood.damage.w.barrier
regret.calc.out$regret.array <- regret.vals
regret.calc.out$should.build <- should.build
regret.calc.out$shouldnt.build <- shouldnt.build
# regret.calc.out$avg.no.barrier <- avg.damage.no.barrier
# regret.calc.out$avg.w.barrier <- avg.damage.w.barrier
#  regret.calc.out$flood.prob <- prob.of.flood
# regret.calc.out$flood.w.barrier.prob <- prob.of.flood.barrier
regret.calc.out$new.vals.no.barrier <- new.vals.no.barrier
regret.calc.out$new.vals.barrier <- new.vals.barrier
regret.calc.out$expected.damage.no.barrier <- expected.damage.no.barrier
regret.calc.out$expected.damage.w.barrier <- expected.damage.w.barrier
regret.calc.out$total.w.barrier <- total.expected.w.barrier
regret.calc.out$total.no.barrier <- total.expected.no.barrier
regret.calc.out$expected.total.costs.no.barrier <- expected.total.costs.no.barrier
regret.calc.out$expected.total.costs.w.barrier <- expected.total.costs.w.barrier
return(regret.calc.out)
}
param.names <- c('mu', 'sigma', 'xi')
test1 <- mcmc.test.stationary.parallel[[1]]$samples
regret.stationary <- regret.calculator(niter = niter,
years = years,
effect.height.no.barrier = effect.height.no.barrier,
effect.height.barrier=effect.height.barrier,
slr=slr,
mcmc.chain = test1 ,
n.params = 3,
param.names = param.names,
temps = temp.vals)
regret.calculator <- function(niter,
years,
effect.height.no.barrier,
effect.height.barrier,
slr,
mcmc.chain,
n.params,
param.names,
temps
){ #niter = number iterations (int), years - sequence of years to cover,
#prob of a certain flood happening                    #effect.height.no.barrier (height in mm of no damage area)
#effect.height.barrier (height in mm of no damage area w barrier present)
#slr, rate at which sea level is changing in the particular area
#change in effective height over course of years
#lower.level <- effect.height.no.barrier - 21*slr
#lower.level.barrier <- effect.height.barrier - 21*slr
# hgt.changing <- effect.height.no.barrier - length(years)*slr
#hgt.barrier.changing <- effect.height.barrier - length(years)*slr
#hgt.changing <- seq(from = 2850, to = 2796 , by = -2.57 ) #this is hard coded at the moment to try to get it to work
#hgt.barrier.changing <- seq(from = 3280, to = 3227, by = -2.57)
n.years <- length(years)
#calculate cdf of flooding w no barrier and sea level
#temp included if non stationary
#prob.of.flood <- matrix(ncol = length(years), nrow = niter)
#new.vals.barrier <- matrix(ncol = length(years), nrow = niter)
#prob.of.flood.barrier <- matrix(ncol = length(years), nrow = niter)
#new.vals.barrier <- matrix(ncol = length(years), nrow = niter)
#prob.of.flood <- rep(0,length(sea.level))
#prob.of.flood.barrier <- rep(0,length(sea.level))
total.expected.no.barrier <- rep(0, niter)
total.expected.w.barrier <- rep(0,niter)
#new.vals.no.barrier <- rep(0,length(sea.level))
#new.vals.barrer <- rep(0,length(sea.level))
#new.vals.no.barrier <- rep(0, niter)
#new.vals.barrier <- rep(0, niter)
#expected.damage.no.barrier <- rep(0,n.years)#0,n.years)
#expected.damage.w.barrier <- rep(0,n.years)
expected.total.costs.no.barrier <- rep(0,niter)
expected.total.costs.w.barrier <- rep(0,niter)
pb <- txtProgressBar(min=0,max=niter,initial=0,style=3)
for(i in 1:niter){ #cutting off the start before convergence , need temp prediction of the future , going to make it shorter to see how long this takes to do
#uncomment when doing more than one iteration
expected.damage.no.barrier <- rep (0,n.years)
expected.damage.w.barrier <- rep(0,n.years)
total.costs.no.barrier <- rep (0,n.years)
total.costs.w.barrier <- rep (0,n.years)
for (t in 1:n.years){
#new.vals.no.barrier[i] <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temps[t], data = sea.level) #hgt.changing
#new.vals.barrier[i] <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temps[t], data = sea.level) #hgt.changing
# prob.of.flood[i,t] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temperature = temps[t], data.pt=hgt.changing[t])
# new.vals.no.barrier[t] <- devd.calculator( p= mcmc.chain[(i + 5e4),], param.names = param.names, temps[t], data = hgt.changing)
#prob.of.flood.barrier[i,t] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temperature =temps[t], data.pt=hgt.barrier.changing[t])
# new.vals.barrier[t] <- devd.calculator(p= mcmc.chain[(i + 5e4),], param.names = param.names, temps[t], data = hgt.barrier.changing)
#uncomment when doing more than one iteration
#new.vals.no.barrier <- rep (0,length(sea.level))
#new.vals.barrer <- rep(0,length(sea.level))
#for (q in 1:length(sea.level.mm)){
#pevd ?
new.vals.no.barrier <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temperature =temps[t], data = sea.level.mm) #hgt.changing
new.vals.barrier <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temperature =temps[t], data = sea.level.mm) #hgt.changing
#prob.of.flood[q] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temps[t], data.pt=hgt.changing[t])
# new.vals.no.barrier[t] <- devd.calculator( p= mcmc.chain[(i + 5e4),], param.names = param.names, temps[t], data = hgt.changing)
#prob.of.flood.barrier[q] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temps[t], data.pt=hgt.barrier.changing[t])
#}
#calculating changing damage costs as sea level rises
damage.values <- rep(0, length(sea.level.m))
damage.values.w.barrier <- rep(0, length(sea.level.m))
for (j in 1:length(sea.level.m)){
damage.values[j] <- damage.calc(sea.level.m[j], t)*1e6
damage.values.w.barrier[j] <- damage.calc.w.barrier(sea.level.m[j], t)*1e6
}
print(damage.values)
print(damage.values.w.barrier)
expected.damage.no.barrier[t] <- sum(damage.values * new.vals.no.barrier) / sum(new.vals.no.barrier)
expected.damage.w.barrier[t] <- sum(damage.values.w.barrier * new.vals.barrier) / sum(new.vals.barrier)
total.costs.no.barrier[t] <- expected.damage.no.barrier[t]
if (t == 1){
total.costs.w.barrier[t] <- expected.damage.w.barrier[t] + 18e6
}
else{
total.costs.w.barrier[t] <- expected.damage.w.barrier[t] + (75e3 / ((1.035)^(t-1)))
}
# expected.damage + build/maintenance costs
}
#expected damage costs
print(expected.damage.no.barrier - expected.damage.w.barrier)
#print(expected.damage.w.barrier)
total.expected.no.barrier[i] <- mean(expected.damage.no.barrier)
total.expected.w.barrier[i] <- mean(expected.damage.w.barrier)
#expected costs including building & upkeeping barrier
expected.total.costs.no.barrier[i] <- mean(total.costs.no.barrier)
expected.total.costs.w.barrier[i] <- mean(total.costs.w.barrier)
setTxtProgressBar(pb, i)
}
close(pb)
#flood.damage.no.barrier <- expected.total.costs.no.barrier * prob.of.flood #changed from total.expected.no.barrier
#flood.damage.w.barrier <- expected.total.costs.w.barrier * prob.of.flood.barrier  #changed from total.expected.w.barrier
#print(flood.damage.no.barrier)
#print(flood.damage.w.barrier)
#find the average values of damage costs for each iteration
#avg.damage.no.barrier <- mean(expected.total.costs.no.barrier) #apply(flood.damage.no.barrier, 1, mean) #mean(flood.damage.no.barrier)
#avg.damage.w.barrier <- mean(expected.total.costs.w.barrier)#apply(flood.damage.w.barrier, 1, mean) #mean(flood.damage.w.barrier)
#use which to find the number of places where we should and shouldnt build
should.build <- which(expected.total.costs.w.barrier < expected.total.costs.no.barrier)
shouldnt.build <- which(expected.total.costs.no.barrier < expected.total.costs.w.barrier)
#should.build <- which(avg.damage.w.barrier < avg.damage.no.barrier)
#shouldnt.build <- which(avg.damage.no.barrier < avg.damage.w.barrier)
# regret.vals <- rep(0, length(avg.damage.no.barrier))
regret.vals <- rep(0, length(expected.total.costs.w.barrier))
if (length(should.build) > length(shouldnt.build)){
#we will be building - now need to calculate regret of the no build values
for (i in 1:length(shouldnt.build)){
regret.vals[i] <- abs(expected.total.costs.no.barrier[shouldnt.build[i]] - expected.total.costs.w.barrier[shouldnt.build[i]])
# regret.vals[i] <- abs(avg.damage.no.barrier[shouldnt.build[i]] - avg.damage.w.barrier[shouldnt.build[i]])
}
}else{
for (i in 1:length(should.build)){
regret.vals[i] <- abs(expected.total.costs.no.barrier[should.build[i]] - expected.total.costs.w.barrier[should.build[i]])
#regret.vals[i] <- abs(avg.damage.no.barrier[should.build[i]] - avg.damage.w.barrier[should.build[i]])
}
#regret.vals[i] <- abs(avg.damage.no.barrier[should.build[i]] - avg.damage.w.barrier[should.build[i]])
}
regret.calc.out <- vector('list', 11)
names(regret.calc.out) <- c('regret.array', 'should.build',
'shouldnt.build',
'new.vals.no.barrier', 'new.vals.barrier','expected.damage.no.barrier',
'expected.damage.w.barrier', 'total.w.barrier', 'total.no.barrier',
'expected.total.costs.no.barrier', 'expected.total.costs.w.barrier')
#taken out: 'no.barrier', 'w.barrier','flood.prob', 'flood.w.barrier.prob',
# regret.calc.out$no.barrier <- flood.damage.no.barrier
#regret.calc.out$w.barrier <- flood.damage.w.barrier
regret.calc.out$regret.array <- regret.vals
regret.calc.out$should.build <- should.build
regret.calc.out$shouldnt.build <- shouldnt.build
# regret.calc.out$avg.no.barrier <- avg.damage.no.barrier
# regret.calc.out$avg.w.barrier <- avg.damage.w.barrier
#  regret.calc.out$flood.prob <- prob.of.flood
# regret.calc.out$flood.w.barrier.prob <- prob.of.flood.barrier
regret.calc.out$new.vals.no.barrier <- new.vals.no.barrier
regret.calc.out$new.vals.barrier <- new.vals.barrier
regret.calc.out$expected.damage.no.barrier <- expected.damage.no.barrier
regret.calc.out$expected.damage.w.barrier <- expected.damage.w.barrier
regret.calc.out$total.w.barrier <- total.expected.w.barrier
regret.calc.out$total.no.barrier <- total.expected.no.barrier
regret.calc.out$expected.total.costs.no.barrier <- expected.total.costs.no.barrier
regret.calc.out$expected.total.costs.w.barrier <- expected.total.costs.w.barrier
return(regret.calc.out)
}
param.names <- c('mu', 'sigma', 'xi')
test1 <- mcmc.test.stationary.parallel[[1]]$samples
regret.stationary <- regret.calculator(niter = niter,
years = years,
effect.height.no.barrier = effect.height.no.barrier,
effect.height.barrier=effect.height.barrier,
slr=slr,
mcmc.chain = test1 ,
n.params = 3,
param.names = param.names,
temps = temp.vals)
regret.calculator <- function(niter,
years,
effect.height.no.barrier,
effect.height.barrier,
slr,
mcmc.chain,
n.params,
param.names,
temps
){ #niter = number iterations (int), years - sequence of years to cover,
#prob of a certain flood happening                    #effect.height.no.barrier (height in mm of no damage area)
#effect.height.barrier (height in mm of no damage area w barrier present)
#slr, rate at which sea level is changing in the particular area
#change in effective height over course of years
#lower.level <- effect.height.no.barrier - 21*slr
#lower.level.barrier <- effect.height.barrier - 21*slr
# hgt.changing <- effect.height.no.barrier - length(years)*slr
#hgt.barrier.changing <- effect.height.barrier - length(years)*slr
#hgt.changing <- seq(from = 2850, to = 2796 , by = -2.57 ) #this is hard coded at the moment to try to get it to work
#hgt.barrier.changing <- seq(from = 3280, to = 3227, by = -2.57)
n.years <- length(years)
#calculate cdf of flooding w no barrier and sea level
#temp included if non stationary
#prob.of.flood <- matrix(ncol = length(years), nrow = niter)
#new.vals.barrier <- matrix(ncol = length(years), nrow = niter)
#prob.of.flood.barrier <- matrix(ncol = length(years), nrow = niter)
#new.vals.barrier <- matrix(ncol = length(years), nrow = niter)
#prob.of.flood <- rep(0,length(sea.level))
#prob.of.flood.barrier <- rep(0,length(sea.level))
total.expected.no.barrier <- rep(0, niter)
total.expected.w.barrier <- rep(0,niter)
#new.vals.no.barrier <- rep(0,length(sea.level))
#new.vals.barrer <- rep(0,length(sea.level))
#new.vals.no.barrier <- rep(0, niter)
#new.vals.barrier <- rep(0, niter)
#expected.damage.no.barrier <- rep(0,n.years)#0,n.years)
#expected.damage.w.barrier <- rep(0,n.years)
expected.total.costs.no.barrier <- rep(0,niter)
expected.total.costs.w.barrier <- rep(0,niter)
pb <- txtProgressBar(min=0,max=niter,initial=0,style=3)
for(i in 1:niter){ #cutting off the start before convergence , need temp prediction of the future , going to make it shorter to see how long this takes to do
#uncomment when doing more than one iteration
expected.damage.no.barrier <- rep (0,n.years)
expected.damage.w.barrier <- rep(0,n.years)
total.costs.no.barrier <- rep (0,n.years)
total.costs.w.barrier <- rep (0,n.years)
for (t in 1:n.years){
#new.vals.no.barrier[i] <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temps[t], data = sea.level) #hgt.changing
#new.vals.barrier[i] <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temps[t], data = sea.level) #hgt.changing
# prob.of.flood[i,t] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temperature = temps[t], data.pt=hgt.changing[t])
# new.vals.no.barrier[t] <- devd.calculator( p= mcmc.chain[(i + 5e4),], param.names = param.names, temps[t], data = hgt.changing)
#prob.of.flood.barrier[i,t] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temperature =temps[t], data.pt=hgt.barrier.changing[t])
# new.vals.barrier[t] <- devd.calculator(p= mcmc.chain[(i + 5e4),], param.names = param.names, temps[t], data = hgt.barrier.changing)
#uncomment when doing more than one iteration
#new.vals.no.barrier <- rep (0,length(sea.level))
#new.vals.barrer <- rep(0,length(sea.level))
#for (q in 1:length(sea.level.mm)){
#pevd ?
new.vals.no.barrier <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temperature =temps[t], data = sea.level.mm) #hgt.changing
new.vals.barrier <- devd.calculator(p= mcmc.chain[5e4+i,], param.names = param.names, temperature =temps[t], data = sea.level.mm) #hgt.changing
#prob.of.flood[q] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temps[t], data.pt=hgt.changing[t])
# new.vals.no.barrier[t] <- devd.calculator( p= mcmc.chain[(i + 5e4),], param.names = param.names, temps[t], data = hgt.changing)
#prob.of.flood.barrier[q] <- pevd.calculator(p=mcmc.chain[5e4+i,], param.names=param.names, temps[t], data.pt=hgt.barrier.changing[t])
#}
#calculating changing damage costs as sea level rises
damage.values <- rep(0, length(sea.level.m))
damage.values.w.barrier <- rep(0, length(sea.level.m))
for (j in 1:length(sea.level.m)){
damage.values[j] <- damage.calc(sea.level.m[j], t)*1e6
damage.values.w.barrier[j] <- damage.calc.w.barrier(sea.level.m[j], t)*1e6
}
# print(damage.values)
print(damage.values.w.barrier)
expected.damage.no.barrier[t] <- sum(damage.values * new.vals.no.barrier) / sum(new.vals.no.barrier)
expected.damage.w.barrier[t] <- sum(damage.values.w.barrier * new.vals.barrier) / sum(new.vals.barrier)
total.costs.no.barrier[t] <- expected.damage.no.barrier[t]
if (t == 1){
total.costs.w.barrier[t] <- expected.damage.w.barrier[t] + 18e6
}
else{
total.costs.w.barrier[t] <- expected.damage.w.barrier[t] + (75e3 / ((1.035)^(t-1)))
}
# expected.damage + build/maintenance costs
}
#expected damage costs
print(expected.damage.no.barrier - expected.damage.w.barrier)
#print(expected.damage.w.barrier)
total.expected.no.barrier[i] <- mean(expected.damage.no.barrier)
total.expected.w.barrier[i] <- mean(expected.damage.w.barrier)
#expected costs including building & upkeeping barrier
expected.total.costs.no.barrier[i] <- mean(total.costs.no.barrier)
expected.total.costs.w.barrier[i] <- mean(total.costs.w.barrier)
setTxtProgressBar(pb, i)
}
close(pb)
#flood.damage.no.barrier <- expected.total.costs.no.barrier * prob.of.flood #changed from total.expected.no.barrier
#flood.damage.w.barrier <- expected.total.costs.w.barrier * prob.of.flood.barrier  #changed from total.expected.w.barrier
#print(flood.damage.no.barrier)
#print(flood.damage.w.barrier)
#find the average values of damage costs for each iteration
#avg.damage.no.barrier <- mean(expected.total.costs.no.barrier) #apply(flood.damage.no.barrier, 1, mean) #mean(flood.damage.no.barrier)
#avg.damage.w.barrier <- mean(expected.total.costs.w.barrier)#apply(flood.damage.w.barrier, 1, mean) #mean(flood.damage.w.barrier)
#use which to find the number of places where we should and shouldnt build
should.build <- which(expected.total.costs.w.barrier < expected.total.costs.no.barrier)
shouldnt.build <- which(expected.total.costs.no.barrier < expected.total.costs.w.barrier)
#should.build <- which(avg.damage.w.barrier < avg.damage.no.barrier)
#shouldnt.build <- which(avg.damage.no.barrier < avg.damage.w.barrier)
# regret.vals <- rep(0, length(avg.damage.no.barrier))
regret.vals <- rep(0, length(expected.total.costs.w.barrier))
if (length(should.build) > length(shouldnt.build)){
#we will be building - now need to calculate regret of the no build values
for (i in 1:length(shouldnt.build)){
regret.vals[i] <- abs(expected.total.costs.no.barrier[shouldnt.build[i]] - expected.total.costs.w.barrier[shouldnt.build[i]])
# regret.vals[i] <- abs(avg.damage.no.barrier[shouldnt.build[i]] - avg.damage.w.barrier[shouldnt.build[i]])
}
}else{
for (i in 1:length(should.build)){
regret.vals[i] <- abs(expected.total.costs.no.barrier[should.build[i]] - expected.total.costs.w.barrier[should.build[i]])
#regret.vals[i] <- abs(avg.damage.no.barrier[should.build[i]] - avg.damage.w.barrier[should.build[i]])
}
#regret.vals[i] <- abs(avg.damage.no.barrier[should.build[i]] - avg.damage.w.barrier[should.build[i]])
}
regret.calc.out <- vector('list', 11)
names(regret.calc.out) <- c('regret.array', 'should.build',
'shouldnt.build',
'new.vals.no.barrier', 'new.vals.barrier','expected.damage.no.barrier',
'expected.damage.w.barrier', 'total.w.barrier', 'total.no.barrier',
'expected.total.costs.no.barrier', 'expected.total.costs.w.barrier')
#taken out: 'no.barrier', 'w.barrier','flood.prob', 'flood.w.barrier.prob',
# regret.calc.out$no.barrier <- flood.damage.no.barrier
#regret.calc.out$w.barrier <- flood.damage.w.barrier
regret.calc.out$regret.array <- regret.vals
regret.calc.out$should.build <- should.build
regret.calc.out$shouldnt.build <- shouldnt.build
# regret.calc.out$avg.no.barrier <- avg.damage.no.barrier
# regret.calc.out$avg.w.barrier <- avg.damage.w.barrier
#  regret.calc.out$flood.prob <- prob.of.flood
# regret.calc.out$flood.w.barrier.prob <- prob.of.flood.barrier
regret.calc.out$new.vals.no.barrier <- new.vals.no.barrier
regret.calc.out$new.vals.barrier <- new.vals.barrier
regret.calc.out$expected.damage.no.barrier <- expected.damage.no.barrier
regret.calc.out$expected.damage.w.barrier <- expected.damage.w.barrier
regret.calc.out$total.w.barrier <- total.expected.w.barrier
regret.calc.out$total.no.barrier <- total.expected.no.barrier
regret.calc.out$expected.total.costs.no.barrier <- expected.total.costs.no.barrier
regret.calc.out$expected.total.costs.w.barrier <- expected.total.costs.w.barrier
return(regret.calc.out)
}
regret.stationary <- regret.calculator(niter = niter,
years = years,
effect.height.no.barrier = effect.height.no.barrier,
effect.height.barrier=effect.height.barrier,
slr=slr,
mcmc.chain = test1 ,
n.params = 3,
param.names = param.names,
temps = temp.vals)
regret.stationary$expected.total.costs.no.barrier
regret.stationary$expected.total.costs.w.barrier
regret.all.nonstationary$expected.total.costs.w.barrier
regret.all.nonstationary$expected.total.costs.no.barrier
mu <- test1[1,]
plot(mu)
mu <- test[,1]
plot(mu)
mu <- test1[,1]
plot(mu)
plot(mu, type='l')
mu1 <- mu.nonstat[,2]
hist(mu1)
mu1 <- mu.nonstat[5e4:length(mu.nonstat),2]
mu1 <- mu.nonstat[5e4:nrow(mu.nonstat),2]
hist(mu1)
setwd('~/codes/Klufas_NewLondon/R/')
source('read_tide_data.R')
tide.data <- read.tide.data()
plot(log(tide.data$max))
plot(log(tide.data$max / 1000))
