sigma1 <- p[4]
xi <- p[5]
mu <- mu0 + mu1*temps
sigma <- exp(sigma0 + sigma1*temps)
}
else if(p[1]=='mu'){
mu <- p[1]
sigma0 <- p[2]
sigma1 <- p[3]
xi0 <- p[4]
xi1 <- p[5]
sigma <- exp(sigma0 + sigma1*temps)
xi <- xi0 + xi1*temps
}
else{
mu0 <- p[1]
mu1 <- p[2]
sigma <- p[3]
xi0 <- p[4]
xi1 <- p[5]
mu <- mu0 + mu1*temps
xi <- xi0 + xi1*temps
}
}
else if (length(p) ==6){
mu0 <- p[1]
mu1 <- p[2]
sigma0 <- p[3]
sigma1 <- p[4]
xi0 <- p[5]
xi1 <- p[6]
mu <- mu0 + mu1*temps
sigma <- exp(sigma0 + sigma1*temps)
xi <- xi0 + xi1*temps
}
nll <- -1*sum(devd(data, loc=mu, scale=sigma, shape=xi, type=c('GEV'), log=TRUE))
return(nll)
}
#------non stationary mu and xi--------------------------------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, 0, 0, -1, -1)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j]  , scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, 0, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5 <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim5), pch = 2, col='red')
}
optim.like.temp5$optim$bestmem
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 100, 100, 10, 10)
lower.bound <- c(0, -100, 0, -1, -1)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j]  , scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
optim.like.temp5$optim$bestmem
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 100, 1000, 10, 10)
lower.bound <- c(0, -100, 0, -1, -10)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j]  , scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
optim.like.temp5$optim$bestmem
neg.log.like.calc <- function(p, data, temps){
if (length(p) ==3){
mu <- p[1]
sigma <- p[2]
xi <- p[3]
}
else if(length(p) ==4){
if (p[1] == 'mu0'){
mu0 <- p[1]
mu1 <- p[2]
sigma <- p[3]
xi <- p[4]
mu <- mu0 + mu1*temps
}
else if(p[2] == 'sigma0'){
mu <- p[1]
sigma0 <- p[2]
sigma1 <- p[3]
xi <- p[4]
sigma <- exp(sigma0 + sigma1*temps)
}
else{
mu <- p[1]
sigma <- p[2]
xi0 <- p[3]
xi1<- p[4]
xi <- xi0 + xi1*temps
}
}
else if (length(p) == 5){
if (p[1] == 'm0' && p[3] == 'sigma0'){
mu0 <- p[1]
mu1 <- p[2]
sigma0 <- p[3]
sigma1 <- p[4]
xi <- p[5]
mu <- mu0 + mu1*temps
sigma <- exp(sigma0 + sigma1*temps)
}
else if(p[1]=='mu'){
mu <- p[1]
sigma0 <- p[2]
sigma1 <- p[3]
xi0 <- p[4]
xi1 <- p[5]
sigma <- exp(sigma0 + sigma1*temps)
xi <- xi0 + xi1*temps
}
else{
mu0 <- p[1]
mu1 <- p[2]
sigma <- p[3]
xi0 <- p[4]
xi1 <- p[5]
mu <- mu0 + mu1*temps
sigma <- exp(sigma)
xi <- xi0 + xi1*temps
}
}
else if (length(p) ==6){
mu0 <- p[1]
mu1 <- p[2]
sigma0 <- p[3]
sigma1 <- p[4]
xi0 <- p[5]
xi1 <- p[6]
mu <- mu0 + mu1*temps
sigma <- exp(sigma0 + sigma1*temps)
xi <- xi0 + xi1*temps
}
nll <- -1*sum(devd(data, loc=mu, scale=sigma, shape=xi, type=c('GEV'), log=TRUE))
return(nll)
}
#------sigma and xi non stationary--------------------------------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, 0, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5 <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim5), pch = 2, col='red')
}
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 100, 1000, 10, 10)
lower.bound <- c(0, -100, 0, -1, -10)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j]  , scale = optim.like.temp5$optim$bestmem[3], shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j]  , scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
#------sigma and xi non stationary--------------------------------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, 0, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5 <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim5), pch = 2, col='red')
}
#------only sigma non stationary --------------------------------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma0', 'sigma1', 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, 0, 0, -1, -1)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j]  , scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
#------ only xi non stationary--------------------------------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, 0, 0, -1, -1)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j]  , scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
#------sigma and xi non stationary----------------------doesn't work yet----------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, 0, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5 <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim5), pch = 2, col='red')
}
optim.like.temp4$optim$bestmem
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, -100, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5 <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim5), pch = 2, col='red')
}
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(x[lsl.max[i] - sf.optim2[i]], i = 1, length(lsl.max)))**2)
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim2[i], i = 1, length(lsl.max)))**2)
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 1, 1)
lower.bound <- c(0, 0, -1, -1)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp6$optim$bestmem[1], scale = exp(optim.like.temp5$optim$bestmem[2]), shape = optim.like.temp5$optim$bestmem[3] + optim.like.temp5$optim$bestmem[4]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
optim.like.temp6$optim$bestmem
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, 0, -1)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
optim.like.temp6$optim$bestmem
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, -10, -1)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
optim.like.temp6$optim$bestmem
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp6$optim$bestmem[1], scale = exp(optim.like.temp5$optim$bestmem[2]), shape = optim.like.temp5$optim$bestmem[3] + optim.like.temp5$optim$bestmem[4]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
p.names <- c('mu', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 500 , 1, 1)
lower.bound <- c(0, 0, -1, -1)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
p.names <- c('mu', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 500 , 1, 1)
lower.bound <- c(0, 0, -1, -1)
optim.like.temp7 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
optim.like.temp7$optim$bestmem
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, -10, -1)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim7 <-1-pevd(lsl.max[j], loc = optim.like.temp6$optim$bestmem[1], scale = exp(optim.like.temp6$optim$bestmem[2] + optim.like.temp6$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp6$optim$bestmem[4],type=c('GEV'))
points(lsl.max[j], log10(sf.optim7), pch = 2, col='red')
}
optim.like.temp6$optim$bestmem
p.names <- c('mu', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 500 , 1, 1)
lower.bound <- c(0, 0, -1, -1)
optim.like.temp7 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim8 <-1-pevd(lsl.max[j], loc = optim.like.temp7$optim$bestmem[1], scale = exp(optim.like.temp6$optim$bestmem[2]), shape = optim.like.temp6$optim$bestmem[3] + optim.like.temp6$optim$bestmem[4]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim8), pch = 2, col='red')
}
optim.like.temp7$optim$bestmem
p.names <- c('mu', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 500 , 1, 1)
lower.bound <- c(0, 0, -1, -1)
optim.like.temp7 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim8 <-1-pevd(lsl.max[j], loc = optim.like.temp7$optim$bestmem[1], scale = exp(optim.like.temp7$optim$bestmem[2]), shape = optim.like.temp7$optim$bestmem[3] + optim.like.temp7$optim$bestmem[4]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim8), pch = 2, col='red')
}
#------non stationary mu and xi----------this one works----------------------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu0', 'mu1', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 100, 1000, 10, 10)
lower.bound <- c(0, -100, 0, -1, -10)
optim.like.temp5 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j]  , scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
p.names <- c('mu', 'sigma0', 'sigma1' , 'xi0', 'xi1')
upper.bound <- c(3000, 1000, 10 , 1, 1)
lower.bound <- c(0, -100, 0, -1, -1)
optim.like.temp4 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim5 <-1-pevd(lsl.max[j], loc = optim.like.temp4$optim$bestmem[1], scale = exp(optim.like.temp4$optim$bestmem[2] + optim.like.temp4$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp4$optim$bestmem[4] + optim.like.temp4$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim5), pch = 2, col='red')
}
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, -10, -1)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim7 <-1-pevd(lsl.max[j], loc = optim.like.temp6$optim$bestmem[1], scale = exp(optim.like.temp6$optim$bestmem[2] + optim.like.temp6$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp6$optim$bestmem[4],type=c('GEV'))
points(lsl.max[j], log10(sf.optim7), pch = 2, col='red')
}
optim.like.temp6$optim$bestmem
#------ only xi non stationary---------------------------------this doesn't work------------------ --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma', 'xi0', 'xi1')
upper.bound <- c(3000, 500 , 1, 1)
lower.bound <- c(0, 0, -1, -1)
optim.like.temp7 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim8 <-1-pevd(lsl.max[j], loc = optim.like.temp7$optim$bestmem[1], scale = exp(optim.like.temp7$optim$bestmem[2]), shape = optim.like.temp7$optim$bestmem[3] + optim.like.temp7$optim$bestmem[4]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim8), pch = 2, col='red')
}
optim.like.temp7$optim$bestmem
neg.log.like.calc <- function(p, data, temps){
if (length(p) ==3){
mu <- p[1]
sigma <- p[2]
xi <- p[3]
}
else if(length(p) ==4){
if (p[1] == 'mu0'){
mu0 <- p[1]
mu1 <- p[2]
sigma <- p[3]
xi <- p[4]
mu <- mu0 + mu1*temps
}
else if(p[2] == 'sigma0'){
mu <- p[1]
sigma0 <- p[2]
sigma1 <- p[3]
xi <- p[4]
sigma <- exp(sigma0 + sigma1*temps)
}
else{
mu <- p[1]
sigma <- p[2]
xi0 <- p[3]
xi1<- p[4]
xi <- xi0 + xi1*temps
}
}
else if (length(p) == 5){
if (p[1] == 'm0' && p[3] == 'sigma0'){
mu0 <- p[1]
mu1 <- p[2]
sigma0 <- p[3]
sigma1 <- p[4]
xi <- p[5]
mu <- mu0 + mu1*temps
sigma <- exp(sigma0 + sigma1*temps)
}
else if(p[1]=='mu'){
mu <- p[1]
sigma0 <- p[2]
sigma1 <- p[3]
xi0 <- p[4]
xi1 <- p[5]
sigma <- exp(sigma0 + sigma1*temps)
xi <- xi0 + xi1*temps
}
else{
mu0 <- p[1]
mu1 <- p[2]
sigma <- p[3]
xi0 <- p[4]
xi1 <- p[5]
mu <- mu0 + mu1*temps
sigma <- exp(sigma)
xi <- xi0 + xi1*temps
}
}
else if (length(p) ==6){
mu0 <- p[1]
mu1 <- p[2]
sigma0 <- p[3]
sigma1 <- p[4]
xi0 <- p[5]
xi1 <- p[6]
mu <- mu0 + mu1*temps
sigma <- exp(sigma0 + sigma1*temps)
xi <- xi0 + xi1*temps
}
nll <- -1*sum(devd(data, loc=mu, scale=sigma, shape=xi, type=c('GEV'), log=TRUE))
return(nll)
}
#------only sigma non stationary -------------------------this doesnt work-------------------------- --------------------------------------------------- ---------------------------------------------------
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, -10, -1)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
#---------run for plot of non sationary sigma
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim7 <-1-pevd(lsl.max[j], loc = optim.like.temp6$optim$bestmem[1], scale = exp(optim.like.temp6$optim$bestmem[2] + optim.like.temp6$optim$bestmem[3]*temp.values[j]), shape = optim.like.temp6$optim$bestmem[4],type=c('GEV'))
points(lsl.max[j], log10(sf.optim7), pch = 2, col='red')
}
optim.like.temp6$optim$bestmem
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, -10, -3)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
p.names <- c('mu', 'sigma0', 'sigma1', 'xi')
upper.bound <- c(3000, 1000, 10, 1)
lower.bound <- c(0, 0, -10, -3)
optim.like.temp6 <- DEoptim(neg.log.like.calc, lower=lower.bound, upper=upper.bound, control=de.optim.val, data = lsl.max, temps = temp.values)
optim.like.temp6$optim$bestmem
#---------run for plot of non sationary sigma and xi
plot(x.hgt, log10(sf.hgt), type='l', ylab = 'log probability', xlab = 'height [mm] of sea')
title('Survival Function of height of sea [mm], New London CT')
points(lsl.sorted.vals, log10(esf.vals))
for (j in 1:length(temp.values)){
sf.optim6 <-1-pevd(lsl.max[j], loc = optim.like.temp5$optim$bestmem[1] +optim.like.temp5$optim$bestmem[2]*temp.values[j], scale = exp(optim.like.temp5$optim$bestmem[3]), shape = optim.like.temp5$optim$bestmem[4] + optim.like.temp5$optim$bestmem[5]*temp.values[j],type=c('GEV'))
points(lsl.max[j], log10(sf.optim6), pch = 2, col='red')
}
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim2[i], i = 1, length(lsl.max)))**2)
rmse.mu
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - optim.like.temp[i], i = 1, length(lsl.max)))**2)
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim2[i], i = 1, length(lsl.max)))**2)
rmse.sigma<- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim3[i], i = 1, length(lsl.max)))**2)
rmse.sigma
rmse.mu <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim2[i], i = 1, length(lsl.max)))**2)
rmse.sigma<- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim7[i], i = 1, length(lsl.max)))**2)
rmse.xi <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim4=8[i], i = 1, length(lsl.max)))**2)
rmse.xi <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim4=8[i]), i = 1, length(lsl.max)))**2)
rmse.xi <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim8[i]), i = 1, length(lsl.max)))**2)
rmse.xi <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim8[i], i = 1, length(lsl.max)))**2)
rmse.xi
rmse.sigma
rmse.sigma.xi <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim4[i], i = 1, length(lsl.max)))**2)
rmse.mu.sigma.xi <- sqrt(1/(length(lsl.max))*(sum(lsl.max[i] - sf.optim4[i], i = 1, length(lsl.max)))**2)
rmse.mu.sigma.xi
